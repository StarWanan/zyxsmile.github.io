{"title":"Pytorch & python","uid":"4346091fabb18c4f718acfd51c087897","slug":"python&pytorch使用指南","date":"2022-05-03T12:10:00.000Z","updated":"2022-05-04T03:39:30.478Z","comments":true,"path":"api/articles/python&pytorch使用指南.json","keywords":null,"cover":null,"content":"<h1 id=\"pytorch\">pytorch</h1>\n<h2 id=\"参数-命令行-辅助\">参数 &amp; 命令行 &amp; 辅助</h2>\n<h3 id=\"logger\">logger</h3>\n<p><a\nhref=\"https://blog.csdn.net/liming89/article/details/109609557\">logger模块解释\n—— CSDN</a> <a\nhref=\"https://vimsky.com/examples/detail/python-method-utils.logger.setup_logger.html\">logger使用案例</a></p>\n<p>logging模块是Python内置的标准模块，主要用于输出运行日志，可以设置输出日志的等级、日志保存路径、日志文件回滚等</p>\n<h3 id=\"yacs.config\">yacs.config</h3>\n<p><a href=\"https://zhuanlan.zhihu.com/p/366289700\">yacs使用 ——\n知乎</a></p>\n<p>yacs库，用于为一个系统构建config文件</p>\n<p>需要创建<code>CN()</code>这个作为容器来装载我们的参数，这个容器可以嵌套</p>\n<h2 id=\"设备相关\">设备相关</h2>\n<h3 id=\"torch.cuda.synchronize\">torch.cuda.synchronize()</h3>\n<p>等待当前设备上所有流中的所有核心完成。</p>\n<p>🌰：测试时间的代码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># code 1</span>\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nresult <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span>\nend <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># code 2</span>\ntorch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>synchronize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nresult <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span>\ntorch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>synchronize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nend <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># code 3</span>\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nresult <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\nend <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>代码2是正确的。因为在pytorch里面，程序的执行都是异步的。\n如果采用代码1，测试的时间会很短，因为执行完end=time.time()程序就退出了，后台的cu也因为python的退出退出了。\n如果采用代码2，代码会同步cu的操作，等待gpu上的操作都完成了再继续成形end\n= time.time()</p>\n<p>代码3和代码2的时间是类似的。\n因为代码3会等待gpu上的结果执行完传给print函数，所以时间就和代码2同步的操作的时间基本上是一致的了。\n将print(result)换成result.cpu()结果是一致的。</p>\n<h2 id=\"数据加载\">数据加载</h2>\n<h2 id=\"图像数据变换\">图像数据变换</h2>\n<p>transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224,\n0.225])</p>\n<p>Normalize是把图像数据从[0,1]变成[-1,1]，变换公式是image=(image-mean)/std，那么其中的参数就分别是三个通道的mean和std，这个均值和标准差需要自己计算，范围就是训练集和验证集的所有图像。</p>\n<h3 id=\"dataloader\">DataLoader</h3>\n<p><a\nhref=\"https://blog.csdn.net/weixin_42468475/article/details/108714940\">CSDN原文链接</a>\n<a href=\"https://zhuanlan.zhihu.com/p/361830892\">collate_fn参数使用详解\n—— 知乎</a> <a\nhref=\"https://blog.csdn.net/qq_24407657/article/details/103992170\">num_works参数\n—— CSDN</a></p>\n<hr />\n<p>加载一个batch的数据这一步需要使用一个<code>torch.utils.data.DataLoader</code>对象，并且DataLoader是一个基于某个dataset的iterable，这个iterable每次从dataset中基于某种采样原则取出一个batch的数据。\n也可以这样说：Torch中可以创建一个torch.utils.data.==Dataset==对象，并与torch.utils.data.==DataLoader==一起使用，在训练模型时不断为模型提供数据。</p>\n<p><strong>torch.utils.data.DataLoader</strong></p>\n<p>定义：Data loader. Combines a dataset and a sampler, and provides an\niterable over the given dataset. 构造函数: <pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> \n\t\t\t\t\t\t\tbatch_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n\t\t\t\t\t\t\tshuffle<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> \n\t\t\t\t\t\t\tsampler<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\tbatch_sampler<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> num_workers<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> collate_fn<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\tpin_memory<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> drop_last<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\tworker_init_fn<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> - dataset:\n抽象类,包含两种类型 - <code>map-style datasets</code> -\n<code>iterable-style datasets</code> - batch_size :\n每一次抽样的batch-size大小 - shuffle : True则随机打乱数据 -\nNum_works：将batch加载进RAM的进程数。内存开销大，CPU负担大。可能之后几次迭代的数据在本次迭代的时候已经加载进内存。\n-\ncollate_fn：如何取样本的，我们可以定义自己的函数来准确地实现想要的功能。\n-\ndrop_last：告诉如何处理数据集长度除于batch_size余下的数据。True就抛弃，否则保留。</p>\n<p><strong>Map-style datasets</strong></p>\n<p>是一个类，要求有\n<code>__getitem__()</code>and<code>__len__()</code>这两个构造函数，代表一个从索引映射到数据样本。\n- <code>__getitem__()</code>: 根据索引index遍历数据 -\n<code>__len__()</code>: 返回数据集的长度 - 可编写独立的数据处理函数 - 在\n<code>__getitem()__</code> 函数中进行调用 - 直接将数据处理函数写在\n<code>__getitem()__</code> 或者 <code>__init()__</code>\n函数中，但是<code>__getitem()__</code>\n必须根据==index==返回响应的值，该值会通过index传到dataloader中进行后续的batch批处理。</p>\n<p>基本需要满足： <pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>trg<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p><code>getitem()</code>方法用来从datasets中读取一条数据，这条数据包含训练<strong>图片</strong>（已CV距离）和<strong>标签</strong>，参数index表示图片和标签在总数据集中的Index。</p>\n<p><code>len()</code>方法返回数据集的总长度（训练集的总数）。</p>\n<p><strong>实现 MyDatasets 类</strong></p>\n<ol type=\"1\">\n<li>简单直白</li>\n</ol>\n<p>把 x 和 label 分别装入两个列表 self.src 和 self.trg ，然后通过\ngetitem(self, idex) 返回对应元素 <pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> Dataset<span class=\"token punctuation\">,</span> DataLoader\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">My_dataset</span><span class=\"token punctuation\">(</span>Dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">## 使用sin函数返回10000个时间序列,如果不自己构造数据，就使用numpy,pandas等读取自己的数据为x即可。</span>\n        <span class=\"token comment\">## 以下数据组织这块既可以放在init方法里，也可以放在getitem方法里</span>\n        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">,</span>  self<span class=\"token punctuation\">.</span>trg <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>trg<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \n           \n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>trg<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span> \n        \n <span class=\"token comment\">## 或者return len(self.trg), src和trg长度一样</span>\n \ndata_train <span class=\"token operator\">=</span> My_dataset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndata_test <span class=\"token operator\">=</span> My_dataset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndata_loader_train <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>data_train<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\ndata_loader_test <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>data_test<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">## i_batch的多少根据batch size和def __len__(self)返回的长度确定</span>\n<span class=\"token comment\">## batch_data返回的值根据def __getitem__(self, index)来确定</span>\n<span class=\"token comment\">## 对训练集：(不太清楚enumerate返回什么的时候就多print试试)</span>\n<span class=\"token keyword\">for</span> i_batch<span class=\"token punctuation\">,</span> batch_data <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>data_loader_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i_batch<span class=\"token punctuation\">)</span>  <span class=\"token comment\">## 打印batch编号</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>batch_data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">## 打印该batch里面src</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>batch_data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">## 打印该batch里面trg</span>\n<span class=\"token comment\">## 对测试集：（下面的语句也可以）</span>\n<span class=\"token keyword\">for</span> i_batch<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> trg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>data_loader_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i_batch<span class=\"token punctuation\">)</span>  <span class=\"token comment\">## 打印batch编号</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span>  <span class=\"token comment\">## 打印该batch里面src的尺寸</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>trg<span class=\"token punctuation\">)</span>  <span class=\"token comment\">## 打印该batch里面trg的尺寸    </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>生成的data_train可以通过\n<code>data_train[xxx]</code>直接索引某个元素，或者通过<code>next(iter(data_train))</code>\n得到一条条的数据。</p>\n<ol start=\"2\" type=\"1\">\n<li>借助TensorDataset将数据包装成dataset</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">from</span> torch <span class=\"token keyword\">import</span> nn\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> Dataset<span class=\"token punctuation\">,</span> DataLoader<span class=\"token punctuation\">,</span> TensorDataset\n \nsrc <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ntrg <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n \ndata <span class=\"token operator\">=</span> TensorDataset<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> trg<span class=\"token punctuation\">)</span>\ndata_loader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i_batch<span class=\"token punctuation\">,</span> batch_data <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>data_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i_batch<span class=\"token punctuation\">)</span>  <span class=\"token comment\">## 打印batch编号</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>batch_data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">## 打印该batch里面src</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>batch_data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">## 打印该batch里面trg</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\" type=\"1\">\n<li>地址读取，生成数据的路径 txt文件</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> Dataset\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data <span class=\"token keyword\">import</span> DataLoader\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>image <span class=\"token keyword\">as</span> mpimg\n\n\n\n<span class=\"token comment\">## 对所有图片生成path-label map.txt 这个程序可根据实际需要适当修改</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">generate_map</span><span class=\"token punctuation\">(</span>root_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\">##得到当前绝对路径</span>\n    current_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">##os.path.dirname()向前退一个路径</span>\n    father_path <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>current_path<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>sep <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>root_dir <span class=\"token operator\">+</span> <span class=\"token string\">'map.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> wfp<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            subdir <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>root_dir<span class=\"token punctuation\">,</span> <span class=\"token string\">'%d/'</span> <span class=\"token operator\">%</span> idx<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> file_name <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>subdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                abs_name <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>father_path<span class=\"token punctuation\">,</span> subdir<span class=\"token punctuation\">,</span> file_name<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">## linux_abs_name = abs_name.replace(\"\\\\\", '/')</span>\n                wfp<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;file_dir&#125; &#123;label&#125;\\n'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>file_dir<span class=\"token operator\">=</span>linux_abs_name<span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">## 实现MyDatasets类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDatasets</span><span class=\"token punctuation\">(</span>Dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">## 获取数据存放的dir</span>\n        <span class=\"token comment\">## 例如d:/images/</span>\n        self<span class=\"token punctuation\">.</span>data_dir <span class=\"token operator\">=</span> <span class=\"token builtin\">dir</span>\n        <span class=\"token comment\">## 用于存放(image,label) tuple的list,存放的数据例如(d:/image/1.png,4)</span>\n        self<span class=\"token punctuation\">.</span>image_target_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token comment\">## 从dir--label的map文件中将所有的tuple对读取到image_target_list中</span>\n        <span class=\"token comment\">## map.txt中全部存放的是d:/.../image_data/1/3.jpg 1 路径最好是绝对路径</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'map.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> fp<span class=\"token punctuation\">:</span>\n            content <span class=\"token operator\">=</span> fp<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">##s.rstrip()删除字符串末尾指定字符（默认是字符）</span>\n            <span class=\"token comment\">## 得到 [['d:/.../image_data/1/3.jpg', '1'], ...,]</span>\n            str_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> content<span class=\"token punctuation\">]</span>\n            <span class=\"token comment\">## 将所有图片的dir--label对都放入列表，如果要执行多个epoch，可以在这里多复制几遍，然后统一shuffle比较好</span>\n            self<span class=\"token punctuation\">.</span>image_target_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> str_list<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        image_label_pair <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>image_target_list<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n        <span class=\"token comment\">## 按path读取图片数据，并转换为图片格式例如[3,32,32]</span>\n        <span class=\"token comment\">## 可以用别的代替</span>\n        img <span class=\"token operator\">=</span> mpimg<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span>image_label_pair<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> img<span class=\"token punctuation\">,</span> image_label_pair<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>image_target_list<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">## 生成map.txt</span>\n    <span class=\"token comment\">## generate_map('train/')</span>\n\n    train_loader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>MyDatasets<span class=\"token punctuation\">(</span><span class=\"token string\">'train/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> step <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">20000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>train_loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"网络搭建trick\">网络搭建Trick</h2>\n<h3 id=\"with-torch.no_grad\">with torch.no_grad()</h3>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>参考：https://blog.csdn.net/sazass/article/details/116668755</p></blockquote>\n<p>作用：在该模块下，所有计算得出的tensor的requires_grad都自动设置为False。当requires_grad设置为False时,反向传播时就不会自动求导了，因此大大节约了显存或者说内存。</p>\n<h2 id=\"基本功能函数\">基本功能函数</h2>\n<h3 id=\"torch.max\">torch.max()</h3>\n<p><code>torch.max(input) → Tensor</code>:返回输入tensor中所有元素的最大值</p>\n<p><code>torch.max(input, dim, keepdim=False, out=None) -&gt; (Tensor, LongTensor)</code>:\n按维度dim 返回最大值，并且返回索引。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>， 只返回最大值的每个数\n\ntroch<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>， 只返回最大值的每个索引\n\ntorch<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data 只返回variable中的数据部分（去掉Variable containing<span class=\"token punctuation\">:</span>）\n\ntorch<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 把数据转化成numpy ndarry\n\ntorch<span class=\"token punctuation\">.</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 把数据条目中维度为<span class=\"token number\">1</span> 的删除掉<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"python\">python</h1>\n<p><code>str.lower()</code> 全部转化为小写字母</p>\n","feature":true,"text":"pytorch 参数 &amp; 命令行 &amp; 辅助 logger logger模块解释 —— CSDN logger使用案例 logging模块是Python内置的标准模块，主要用于输出运行日志，可以设置输出日志的等级、日志保存路径、日志文件回滚等 yacs.config...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#pytorch\"><span class=\"toc-text\">pytorch</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E6%95%B0-%E5%91%BD%E4%BB%A4%E8%A1%8C-%E8%BE%85%E5%8A%A9\"><span class=\"toc-text\">参数 &amp; 命令行 &amp; 辅助</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#logger\"><span class=\"toc-text\">logger</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#yacs.config\"><span class=\"toc-text\">yacs.config</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E5%A4%87%E7%9B%B8%E5%85%B3\"><span class=\"toc-text\">设备相关</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#torch.cuda.synchronize\"><span class=\"toc-text\">torch.cuda.synchronize()</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">数据加载</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E5%83%8F%E6%95%B0%E6%8D%AE%E5%8F%98%E6%8D%A2\"><span class=\"toc-text\">图像数据变换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dataloader\"><span class=\"toc-text\">DataLoader</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BAtrick\"><span class=\"toc-text\">网络搭建Trick</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#with-torch.no_grad\"><span class=\"toc-text\">with torch.no_grad()</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E5%8A%9F%E8%83%BD%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">基本功能函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#torch.max\"><span class=\"toc-text\">torch.max()</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#python\"><span class=\"toc-text\">python</span></a></li></ol>","author":{"name":"Star","slug":"blog-author","avatar":"https://gitee.com/zyxstar/Pic_bed/raw/master/image/C06BE6D9-B862-4B4B-A025-F273AE06FAF0.jpeg","link":"/","description":"有棱有角，还会发光；认真生活，星之煌煌","socials":{"github":"https://github.com/ZYXsmile","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"一类嵌入的反向蒸馏","uid":"082602022df518a2faf6c62dcd303051","slug":"一类嵌入反向蒸馏","date":"2022-05-04T03:30:00.000Z","updated":"2022-05-04T03:30:26.007Z","comments":true,"path":"api/articles/一类嵌入反向蒸馏.json","keywords":null,"cover":null,"text":"Anomaly Detection via Reverse Distillation from One-Class Embedding 通过一类嵌入的反向蒸馏进行异常检测 Abstract Knowledge distillation (KD) achieves promisin...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"深度学习","slug":"深度学习","count":2,"path":"api/tags/深度学习.json"},{"name":"异常分割","slug":"异常分割","count":2,"path":"api/tags/异常分割.json"}],"author":{"name":"Star","slug":"blog-author","avatar":"https://gitee.com/zyxstar/Pic_bed/raw/master/image/C06BE6D9-B862-4B4B-A025-F273AE06FAF0.jpeg","link":"/","description":"有棱有角，还会发光；认真生活，星之煌煌","socials":{"github":"https://github.com/ZYXsmile","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"DMLNet","uid":"cca6975b74b1218e11c5b9ba5de4d5ef","slug":"DMLNet","date":"2022-05-03T12:07:00.000Z","updated":"2022-05-04T06:39:34.572Z","comments":true,"path":"api/articles/DMLNet.json","keywords":null,"cover":[],"text":" 开放世界语义分割 开集语义分割模块 闭集语义分割子模块 异常分割子模块 增量小样本学习模块 我是短小精悍的文章摘要(๑•̀ㅂ•́) ✧ CODE multiscale 是自己设定的吗 cfg.DATASET.imgSizes = (300, 375, 450, 525, 600) ...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"深度学习","slug":"深度学习","count":2,"path":"api/tags/深度学习.json"},{"name":"异常分割","slug":"异常分割","count":2,"path":"api/tags/异常分割.json"},{"name":"度量学习","slug":"度量学习","count":1,"path":"api/tags/度量学习.json"}],"author":{"name":"Star","slug":"blog-author","avatar":"https://gitee.com/zyxstar/Pic_bed/raw/master/image/C06BE6D9-B862-4B4B-A025-F273AE06FAF0.jpeg","link":"/","description":"有棱有角，还会发光；认真生活，星之煌煌","socials":{"github":"https://github.com/ZYXsmile","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}